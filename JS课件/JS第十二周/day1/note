## 关于面试
- 基层工程师：基础知识
- 高级工程师：项目经验
- 架构师-解决方案
## 关于基础
- 工程师的自我修养-基础
- 扎实的基础会让你高效学习新技术
========================
## 几个面试题和考点
1、JS中使用typeof能得到哪些类型？ --》考点：js变量类型
2、何时使用===何时使用==？ --》考点：强制类型转换
3、window.onload和DOMContentLoaded的区别？--》考点：浏览器渲染过程
4、用JS创建10个<a>标签，点击的时候弹出对应的序号；--》考点：作用域
5、简述如何实现一个模块加载器，实现类似require.js的基本功能；--》考点：JS模块化
6、实现数据的随机排序；--》考点：JS基础算法；

## 思考：
1、拿到一个面试题，你第一时间看到的是什么？-》考点；
2、又如何看待网上搜出来的永远也看不完的题海？-》不变应万变；不变的是知识；
3、如何对待接下来遇到的面试题？-》题目到知识再到题目；
=============================
## 变量类型和变量计算
- JS中使用typeof能得到哪些数据类型
    - 变量类型vs值类型+引用类型；
    ```
    var a={name:'lei'};
    var b=a;
    b.name='haha';
    console.log(a.age)
    ```
    引用类型：对象，数组，函数； 特点：可以无限制的扩展属性；
    - 答：
    1、typeof可以区分值类型：string,number,boolean,null,undefined；
    2、可以区分出函数数据类型；而无法区分其他引用数据类型；
- 何时使用===何时使用==：强制数据类型转换
   ```
   if(obj.a==null){
    //这里相当于 obj.a===null || obj.a===undefined的简写形式；
    //这是jquery源码推荐的；除此意外，都用===
   }
   ```
    1、字符串拼接：`var a=100+'20'`
    2、==:
        ```
        100=='100'
        0=='';
        null==undefined;
        ```
    3、if
    4、逻辑运算:&& || !
    ```
    console.log(10 && 0)//当作if来执行
    console.log(''||'abc')//当做else来执行
    console.log(!window.abc)
    ```
    扩展：判断一个变量会被当成true还是false？
    ```
    var a=10;
    console.log(!!a)
    ```
- JS中有哪些内置函数
string number boolean null undefined
```
Object
Array
Boolean
Number
String
Function
Date
RegExp
Error
```
- JS变量按存储方式区分为哪些类型，并描述其特点
    - 答：值类型和引用类型；
    1)内存分为：栈内存和堆内存；
    2）栈内存：提供供js代码执行的环境，可以存放基本数据类型； 堆内存：用来存放比较大的数据；比如引用数据类型；
    3）基本数据类型是对值的引用；引用数据类型是对地址的引用
    4）引用数据类型：函数(代码字符串)，对象(key=value)
- 如何理解JSON；
    - JSON是一种数据格式{"key":"value"}；也是一个JS对象，他有两个API
    - JSON.parse()  JSON.stringify();
## 原型和原型链
- 如何准确判断一个变量是数组类型:
    1、 arr.constructor
    2、 instance of
    3、Object.prototype.toString.call
- 写一个原型链继承的例子；
- 描述new一个对象的过程
    1、系统帮你自动创建一个实例this；
    2、我们给this这个对象，添加属性和方法
    3、系统自动把实例this返回；
- zepto(或其他框架)源码中如何使用原型链？

### 知识点
- 构造函数
```
function Fn(name,sex){
    this.name=name;
    this.sex=sex;
    this.class='class-1'
}
var f=new Foo('lei','gril');
```
- 构造函数-扩展
```
var a={}其实是var a=new Object()的语法糖；
...
```
- 原型规则和示例：原型规则是学习原型链的基础；
    1、每个函数数据类型，都有一个属性，叫prototype，prototype是一个对象
    2、prototype这个对象上，天生自带一个属性叫constructor，指向当前所数的类；
    3、每个对象身上都有一个属性叫__proto__;指向当前所属类的原型；
- 原型链：__proto__
    obj.name;
    1)先找obj的私有空间，如果有就是私有属性；
    2）如果没有，通过__proto__,去当前实例所属类的原型上找，找到就是公有方法；
    3）找不到，继续通过__proto__，如果找到Object.prototype上还没有，返回undefined；
- 循环实例对象，拿到私有属性用f.hasOwnProperty(item)

### 作用域和闭包的题目：
1、说一下变量提升的理解->预解释
    1）带var的和带function：
        1：带var只声明，不定义
        2：function 声明+定义
    2）预解释无节操：
        1：只对等号左边带var的声明，但不定义
        2：条件判断语句中，无论条件是否成立，都会进行预解释
        3：自执行函数，不会进行预解释，只有执行到它的时候，声明+定义+调用同步执行
        4：return后面的函数不会进行预解释，return下面的虽然不执行，但会进行预解释
        5：已经声明的过，不会进行重复声明；
2、说明this几种不同的使用场景
    1：当元素的事件被触发的时候，会执行一个函数，函数中的this指向当前这个元素；
    2：自执行函数中的this，永远都是window;
    3: 回调函数中的this，一般是window； setInterval() forEach(function(){},thisArg)
    4：构造函数中的this，指向实例；
    5: 当遇到call，apply，bind的时候，以上规律都失效；
3、创建10个<a/>标签，点击的时候，弹出对应的序号
4、如何理解作用域
```
function F1(){
    var a=100;
    return function(){
        console.log(a);
    }
}
var f1=F1();
var a=200;
console.log(a)
```
5、实际开发中闭包的应用
    - 函数作为返回值
    - 函数作为参数传递:回调
    - 避免全局变量污染的问题；
    - 保存正确的值；-》选项卡的闭包思想；
==================
## 异步和单线程
- 同步和异步的区别是什么？分别举例同步和异步；
    - 同步会阻塞代码，而异步不会；
    - alert()/循环 同步； setTimeout是异步；
- 一个关于setTimeout的笔试题
- 前端使用异步的场景有哪些？
    - setTimeout,setInterval
    - 网络请求：ajax请求，动态<img>加载
    - 事件绑定
    - 回调
### 其他题目
- 获取2017-09-25格式的日期；
- 获取随机数，要求是长度一致的字符串格式
```
var random=Math.random();
random=random+'0000000000' //后面加上10个0；
random=random.slice(0,10)
console.log(random)
```
- 写一个能遍历对象和数组的通用的forEach函数
```
function forEach(obj,fn){
    var key;
    if(obj instanceof Array){
        obj.forEach((item,index)=>{
            fn(index,item)
        })
    }else{
        for(key in obj){
            fn(key,obj[key]);
        }
    }
}
```
===========
### 常说的JS包含两部分
- JS基础知识（ECMA262标准）：条件判断，循环，变量，数组，字符串，运算符等等；
- JS-WEB-API(w3c标准)
    + DOM BOM 事件

### 题目
- DOM是哪种基本的数据结构？
    - DOM树
- DOM操作的常用API有哪些？
    - 新增节点
    - 获取父节点
    - 获取子节点
    - 删除节点
    从两方面考虑：
    1）DOM节点：父节点，上一个哥哥节点，下一个弟弟节点，子节点。。。
    DOM库；
    2）DOM的动态操作：增加，删除，插入，替换
- DOM节点的attr和property有何区别？
    - property是对JS对象的属性的修改
    - attr是对html标签属性的修改；
    属性的操作：1）[] 2). 3)attribute:getAttribute  setAttribute removeAttribute;
### BOM操作
- 如何检测浏览器的类型
- 拆解URL的各部分；
### 知识点
    - navigator：window.navigator.userAgent;判断浏览器类型
    - screen：
        - screen.width
        - screen.height
    - location
        - location.href
        - location.protocol //http https
        - location.host //域名
        - location.pathname //路径
        - location.search //url?后的参数
        - location.hash //#后面的哈希
    - history
        - history.back() //后退
        - history.forward() //前进
        - history.go(); //前进1，后退-1和刷新0或没有传参；
### 事件
1、编写一个通用的事件监听函数；
    - 事件绑定的封装
2、描述事件冒泡流程
3、对于一个无限下拉加载图片的页面，如何给每个图片绑定事件；
    - 事件代理；
### ajax
- 手动编写一个ajax,不依赖第三方库
    var xml=new XMLHttpRequest();
    xml.open();
    xml.onreadystatechange=function(){};
    xml.send();
    - readyState
        0-(未初始化) 还没有调用send()方法
        1-(载入)已调用send()方法，正在发送请求
        2-(载入完成)send()方法执行完成，已经接收到全部响应内容
        3-(交互)正在解析响应内容
        4-(完成)响应内容解析完成，可以在客户端调用了；
    - 状态码：
        2xx-表示成功处理请求
        3XX-需要重定向，浏览器直接跳转
        4XX-客户端请求错误，如404
        5XX-服务端错误；
- 跨域的几种实现方式？
    - 什么是跨域？
        + 浏览器有同源策略，不允许ajax访问其他域的接口；
        + 跨域条件：协议，域名，端口，有一个不同就算跨域；
    - 可以跨域的三个标签
        1、<img src=xxx> 用于打点统计，统计网站可能是其他域；(百度统计，站长统计)
        2、<link href=xxx> 可以使用CDN， CDN的也是其他域
        3、<script src=xxx> 可以一使用JSONP
        注意：所有的跨域请求，都必须经过信息提供方的允许；
        如果未经允许即可获取，那浏览器同源策略出现漏洞；
- 存储
1、请描述下cookie，sessionStorage和localStorage的区别？
    - cookie本身用于客户端和服务端通信
    - 但是它有本地存储的功能，于是就被"借用";
    - 使用document.cookie=...获取和修改即可；
    - cookie存储的缺点
        1、存储量太小，只有4KB ；
        2、不安全
        3、所有http请求都带着，会影响获取资源的效率
        4、API简单，需要封装才能用document.cookie=...;
    - locationStorage和sessionStorage
        1、html5专门为存储而设计，最大容量5M;（它不用请求中再带着）
        2、API简单易用：setItem, getItem;
            注意：IOS safari隐藏模式下；localStorage.getItem会报错；建议统一使用try-catch封装；
答题：
    1、容量：4KB 5M
    2、是否会携带到ajax中
    3、API易用性
===========================
## 开发环境
- 面试官想了解开发环境了解面试者的经验；
- 开发环境，最能体验工作产出的效率
- 会以聊天的形式为主，而不是出具体的问题

###
- IDE (写代码的效率)
    + webstorm
    + sublime
    + vscode
    + atom
    + 插件！插件！
    面试的时候，最好有一个用的很熟悉的，其他都会点；
- git(代码版本管理，多人协作开发);
    + 正式项目都需要代码版本管理
    + 大型项目都需要多人协作开发
    + 一般公司代码非开源，都有自己的git服务器；
    + 常用git命令
        + git add.
        + git commit -m"注释" 把改的东西先提交到自己本地的仓库
        + git push origin master 提交到远程仓库
        + git pull origin master 更新
        + git branch  分支
        + git checkout -b abc/git checkout master 分支切换
        + git merge abc 合并分支
        echo "# test" >> readme.md
        cat readme.md
        git status 查看当前的状态
        git diff 只能查看更改的，无法看到新增的
        + 新人观看代码；git clone
        + 多人协作开发：其他成员可以创建自己的分支；在自己的分支随意修改；
        git branch 查看当前分支
        git checkout -b dev
        改文件
        git add .
        git push origin master
- JS模块化
    + 不使用模块化的情况
        + util.js getFormatDate函数
        + a-util.js aGetFormatDate函数 使用getFormatDate
    + 使用模块化
    + AMD:"Asynchronous Module Definition" 异步模块定义
        + require.js
        + 全局define函数:只有define的东西，才能被require
        + 全局require函数：require([module],callback)
        + 依赖JS会自动，异步加载；
    + CommonJS
        + nodejs模块化规范，现在被大量用前端，原因：
        + 前端开发依赖的插件和库，都可以从npm中获取；
        + 构建工具的高度自动化，使得npm的成本非常低；
        + commonJS不是异步加载JS ，而是同步一次性的加载出来；
        ```
        exports.aa=123;
        exports.bb=1111;
        //a.js
        module.exports={
            date1:(date,type)=>{
                return xxx;
            },
            aa,
            bb
        }
        //b.js
        var b=require('a.js');
        module.exports={
            date2:(date)=>{
            }
        }
        ```
        + es6模块化
            +导出：export default
            +导入:import xxx from 'xxx';
            import './index.css';
- 构建工具：
    - grunt
    - gulp
    - webpack
### webpack
- 为什么出现webpack?
- 什么是webpack?--模块打包机；
    把JS模块，及浏览器不能直接运行的拓展语言(less,TypeScript等)转换和打包为何时的格式供浏览器使用
- webpack和grunt,gulp比较？
    gulp/grunt：优化前端开发流程的工具；
        - 在一个配置文件中，指明对某些文件进行类似编译,组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务；
    webpack:是一种模块化的解决方案；不过webpack的优点使得webpack很多场景下可以替代gulp/grunt类的工具；
        - 工作方式：把你的项目当作一个整体，通过一个给定的主文件(如index.js)，webpack将从这个文件开始找到你的项目的所有的依赖文件，使用loaders处理它们，最后打包为一个(或多个)浏览器可识别的JS文件；
        webpack的处理速度更快更直接，能打包更多不同类型的文件

- 上线回滚的流程
    + 上线和回滚的基本流程：
    上线：
        1、将测试完成的代码提交到git版本库的master分支；
        2、将当前服务器的代码全部打包并记录版本号，备份；1.0
        3、将master分支的代码提交覆盖到线上服务器，生成新版本号；
    回滚
        1、将当前服务器的代码打包并记录版本号，备份
        2、将备份的上一个版本号解压，覆盖到线上服务器，并生成新的版本号；   + Linux基本命令
        服务器使用Linux居多，server版，只有命令行；
        测试环境要匹配线上环境，因此也是Linux；
        pwd cd../ "rm -rf a" "vi a.js" "cp a.js a1.js" "mv a1.js src" "cat a.js" "head a.js" "tail a.js"
## 运行环境
- 浏览器通过绘制和渲染，显示出页面的最终的样子
- 整个过程中，我们需要考虑什么问题？
    - 页面加载过程
    - 性能优化
    - 安全性
### 页面加载
- 从输入URL到得到html的详细过程？
- window.onload和DOMContentLoaded的区别？
#### 加载资源的形式
- 输入URL(或跳转页面)加载html
- 加载html中的静态资源：css,js
#### 加载一个资源的过程
1、浏览器根据DNS服务器得到域名的IP地址；(一个服务器只有一个IP地址)
2、向这个IP的机器发送http请求；
3、服务器收到，处理并返回http请求；
4、浏览器得到返回内容；
#### 浏览器渲染页面的过程
1、根据html结构生成DOMTree - 负责结构
2、根据css生成CSSOM(渲染树) - 负责样式
3、将DOM和CSSOM通过attachment整合形成RenderTree
4、浏览器根据RenerTree+layout开始渲染和展示
5、遇到script时，会执行并阻塞渲染；
(为什么JS会阻塞渲染？因为JS能操作DOM树；浏览器渲染DOM树，JS操作DOM树);
#### 为什么把css放在head中
加载完css的时候，浏览器已经知道样式规则，在渲染的时候，根据计算出的样式来渲染对应的元素；

### 性能优化
- 多使用内存，缓存或其他方法
- 减少cpu 计算，减少网络请求，减少IO操作(对硬盘的读写);

### 例如：加载资源优化
1、静态资源的压缩合并；
2、静态资源缓存；
    - 通过连接名称控制缓存 <script src="abc_1.js"></script>
    只有内容改变的时候，链接名称才会变；
使用CDN让资源加载更快；比如我们使用bootcdn.cn
使用SSR(server send render)后端渲染，数据直接输出到HTML中；
    现在Vue React提出了这样的概念，因为它们默认没有后端渲染的，他是先把模板拉下来的时候，再通过ajax获取数据；
### 渲染优化
CSS放前面，JS放后面
懒加载(图片先不加载，什么时候用，什么时候加载；比如下拉加载更多)
    <img id="img1" src="minSrc.jpg" data-realsrc="abc.png"/>
减少DOM查询，对DOM查询做缓存
    ```
    //这是没有缓存 每次都DOM查询
    for(var i=0; i<document.getElementsByTagName('p').length; i++){
    }
    //提前缓存
    let aList=document.getElementsByTagName('p');
    ```
减少DOM操作，多个操作尽量合并在一起执行；
    - 比如合并DOM操作：如文档碎片
事件节流
    ```
    t1.addEventListener('keyup',()=>{
        if(timer){
            clearTimeout(timeoutId);
        }
        timeoutId=setTimeout(function(){
            //触发change事件；在100ms之上才触发，就能减少CPU的计算；
        },100)
    })
    ```
尽早执行操作(如DOMContentLoaded)

## 安全性
综合性的问题：场景的前端安全问题有哪些？
1、XSS跨站请求攻击；
    - 比如新浪博客写一篇文章，同时偷偷插入一段<script>
    - 攻击代码中，获取cookie，发送自己的服务器；
    - 发布博客，有人查看博客内容
    - 会把查看者的cookie发送到攻击者的服务器；
    预防：
    前端替换关键字，例如替换<为$lt;>为&gt;
        - 会进行DOM操作，影响效率
    后端替换
        - 速度快，建议后端替换
2、XSRF跨站请求伪造；
   - 你已登陆一个购物网站，正在浏览商品；
   - 该网站付费接口是xxx.com/pay?id=200 但是没有任何验证
   - 然后你收到一个邮件，隐藏着 <img src="xxx.com/pay?id=200">
   - 你查看邮件的时候，已经悄悄付费了；
   预防：
   增加验证流程，如输入指纹，密码，短信验证码等；

主要都是后端来防，前端做配合

## 面试技巧
1、简历：
    简洁明了，突出做事，及用到的技术栈，你提炼出什么？你的贡献？
    把个人博客放在简历中，并定期维护更新博客；
    把个人的开源项目放在简历中，并维护开源项目；
    保持能力和经历上的真实性，但事实上不一定是真实性；
2、过程中
    加班如何看待？比如996
    千万不要挑战面试官，不要反考面试官；一定要尊重别人，有礼貌；
    学会给面试官惊喜，但不要太多；
    遇到不会回答的问题，知道多少说多少，不知道虚心请教；
    谈谈你的缺点？比如
